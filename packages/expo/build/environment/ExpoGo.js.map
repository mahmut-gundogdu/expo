{"version":3,"file":"ExpoGo.js","sourceRoot":"","sources":["../../src/environment/ExpoGo.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAWxD,iEAAiE;AACjE,wDAAwD;AACxD,MAAM,kBAAkB,GAAG,CAAC,GAAwB,EAAE;IACpD,IAAI;QACF,OAAO,mBAAmB,CAAC,cAAc,CAAC,CAAC;KAC5C;IAAC,MAAM;QACN,OAAO,IAAI,CAAC;KACb;AACH,CAAC,CAAC,EAAE,CAAC;AAEL;;GAEG;AACH,MAAM,UAAU,iBAAiB;IAC/B,OAAO,kBAAkB,IAAI,IAAI,CAAC;AACpC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,iBAAiB;IAC/B,OAAO,kBAAkB,EAAE,QAAQ,IAAI,IAAI,CAAC;AAC9C,CAAC","sourcesContent":["import { requireNativeModule } from 'expo-modules-core';\n\ntype ExpoGoManifest = {\n  [key: string]: any;\n};\n\ntype ExpoGoModule = {\n  expoVersion: string;\n  manifest: ExpoGoManifest;\n};\n\n// ExpoGoModule is available only when the app is run in Expo Go,\n// otherwise we use `null` instead of throwing an error.\nconst NativeExpoGoModule = ((): ExpoGoModule | null => {\n  try {\n    return requireNativeModule('ExpoGoModule');\n  } catch {\n    return null;\n  }\n})();\n\n/**\n * Returns a boolean value whether the app is running in Expo Go.\n */\nexport function isRunningInExpoGo(): boolean {\n  return NativeExpoGoModule != null;\n}\n\n/**\n * Returns a manifest specific to Expo Go or `null` if the app is not running in Expo Go.\n */\nexport function getExpoGoManifest(): ExpoGoManifest | null {\n  return NativeExpoGoModule?.manifest ?? null;\n}\n"]}